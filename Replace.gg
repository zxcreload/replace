-- Load the Obsidian UI Library and addons
local repo = "https://raw.githubusercontent.com/deividcomsono/Obsidian/main/"
local Library = loadstring(game:HttpGet(repo .. "Library.lua"))()
local ThemeManager = loadstring(game:HttpGet(repo .. "addons/ThemeManager.lua"))()
local SaveManager = loadstring(game:HttpGet(repo .. "addons/SaveManager.lua"))()

-- Silent Aim Configuration and Logic
getgenv().SilentAim = {
	["Options"] = {
		Enabled = false, -- Master switch for silent aim (Defaulted to false)
		Mode = "Auto",  -- Options: "Auto", "Sticky"
		StickyKey = Enum.KeyCode.E, -- Key to toggle Sticky mode target selection
	},
	["Silent"] = {
		Prediction = 0, -- Defaulted to 0
		PredictionXZ = 0, -- Horizontal prediction factor for resolver (Defaulted to 0)
		PredictionY = 0,  -- Vertical prediction factor for resolver (Defaulted to 0)
		Part = "HumanoidRootPart",
		["MultipleParts"] = {
			Enabled = false,
			Parts = { "Head", "UpperTorso", "HumanoidRootPart", "LowerTorso" },
		},
		["Offsets"] = {
			Jump = { Amount = 0 }, -- Defaulted to 0
			Fall = { Amount = 0 }, -- Defaulted to 0
		},
	},
	["Misc"] = {
		["Checks"] = {
			WallCheck = false, -- Defaulted to false
			TargetDeath = false, -- Defaulted to false
			IgnoreGrabbed = false, -- Ignore grabbed players (Defaulted to false)
			IgnoreKO = false,      -- Ignore knocked out players (Defaulted to false)
			["Resolver"] = {
				Enabled = false, -- Toggle resolver on/off (Defaulted to false)
				Type = "Calculate CFrame", -- Options: "Velocity", "Move direction", "Calculate CFrame"
			},
		},
	},
}

-- Prevent script from running multiple times
if getgenv().Loaded then
	return
end

-- Services
local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService") -- Added RunService for FOV circle

-- Optimization Variables
local LocalPlayer = Players.LocalPlayer
local Camera = Workspace.CurrentCamera
local FindFirstChild = game.FindFirstChild
local FindPartOnRayWithIgnoreList = Workspace.FindPartOnRayWithIgnoreList
local GetPlayers = Players.GetPlayers
local GetMouseLocation = UserInputService.GetMouseLocation
local WorldToViewportPoint = Camera.WorldToViewportPoint
local NewVector2 = Vector2.new
local NewCFrame = CFrame.new
local NewRay = Ray.new
local TableFind = table.find
local IsA = game.IsA
local Inf = math.huge

-- Resolver Variables
local lastPosition = nil
local lastUpdateTime = nil
local predictedPosition = nil

-- Sticky Aim Variables
local stickyTarget = nil
local stickyToggled = false

-- Check if player is grabbed
local function IsPlayerGrabbed(player)
	if not SilentAim.Misc.Checks.IgnoreGrabbed then
		return false
	end
	local character = player.Character
	if character then
		return character:FindFirstChild("GRABBING_CONSTRAINT") ~= nil
	end
	return false
end

-- Check if player is knocked out (K.O)
local function IsPlayerKO(player)
	if not SilentAim.Misc.Checks.IgnoreKO then
		return false	end
	local character = player.Character
	if character then
		local bodyEffects = character:FindFirstChild("BodyEffects")
		if bodyEffects then
			local ko = bodyEffects:FindFirstChild("K.O")
			return ko and ko.Value
		end
	end
	return false
end

-- Check if player is alive and valid
local function IsPlayerAlive(player)
	if not player.Character or not player.Character:FindFirstChild("Humanoid") or player.Character.Humanoid.Health <= 0 then
		return false
	end
	if IsPlayerGrabbed(player) or IsPlayerKO(player) then
		return false
	end
	return true
end

-- Wall check to ensure no obstructions
local function WallCheck(character)
	if not SilentAim.Misc.Checks.WallCheck then
		return true
	end
	local targetPosition = character.HumanoidRootPart.Position
	local cameraPosition = Camera.CFrame.Position
	local distance = (targetPosition - cameraPosition).Magnitude
	local hitPart, hitPosition = FindPartOnRayWithIgnoreList(
		Workspace,
		NewRay(cameraPosition, (targetPosition - cameraPosition).Unit * distance),
		{ LocalPlayer.Character, character }
	)
	return hitPart == nil or (hitPosition - cameraPosition).Magnitude >= distance
end

-- Get the closest part from multiple parts
local function GetClosestPartFromPlayerToCursor(multipleParts, character)
	local shortestDistance = Inf
	local closestPart = nil
	local mousePosition = GetMouseLocation(UserInputService)
	local parts = multipleParts.Parts
	local indexAmount = 0

	for _, part in next, character:GetChildren() do
		if IsA(part, "BasePart") and TableFind(parts, part.Name) then
			local onScreenPosition = WorldToViewportPoint(Camera, part.Position)
			local distance = (NewVector2(onScreenPosition.X, onScreenPosition.Y) - mousePosition).Magnitude
			if distance < shortestDistance then
				closestPart = part
				shortestDistance = distance
			end
			indexAmount = indexAmount + 1
		end
		if indexAmount >= #parts then
			break
		end
	end
	return closestPart
end

-- Get the closest player to the cursor
local function GetClosestPlayerToCursor()
	local shortestDistance = Inf
	local closestPlayer = nil
	local mousePosition = GetMouseLocation(UserInputService)
	local part = SilentAim.Silent.Part

	for _, player in next, GetPlayers(Players) do
		local character = player.Character
		if player ~= LocalPlayer and IsPlayerAlive(player) and WallCheck(character) and character:FindFirstChild(part) then
			local onScreenPosition, isOnScreen = WorldToViewportPoint(Camera, character[part].Position)
			local distance = (NewVector2(onScreenPosition.X, onScreenPosition.Y) - mousePosition).Magnitude
			if distance < shortestDistance and isOnScreen then
				closestPlayer = player
				shortestDistance = distance
			end
		end
	end
	return closestPlayer
end

-- Resolver: Predict target position
local function getPredictedPosition(targetPlayer)
	if targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("Humanoid") then
		local aimPartPos = targetPlayer.Character[SilentAim.Silent.Part].Position

		if not lastPosition or not lastUpdateTime then
			lastPosition = aimPartPos
			lastUpdateTime = tick()
			predictedPosition = aimPartPos
			return predictedPosition
		end

		local currentTime = tick()
		local deltaTime = currentTime - lastUpdateTime

		local predictionResolver = SilentAim.Misc.Checks.Resolver.Type
		if predictionResolver == "Velocity" then
			local velocity = targetPlayer.Character[SilentAim.Silent.Part].Velocity
			predictedPosition = aimPartPos + Vector3.new(
				velocity.X * SilentAim.Silent.PredictionXZ,
				velocity.Y * SilentAim.Silent.PredictionY,
				velocity.Z * SilentAim.Silent.PredictionXZ
			)
		elseif predictionResolver == "Move direction" then
			predictedPosition = aimPartPos + (targetPlayer.Character.Humanoid.MoveDirection * (SilentAim.Silent.PredictionXZ * 10))
		elseif predictionResolver == "Calculate CFrame" then
			if (aimPartPos - lastPosition).Magnitude < 0.001 then
				predictedPosition = aimPartPos
			else
				local distance = (aimPartPos - lastPosition).Magnitude
				local predictedDistance = (distance / deltaTime) * (0.1 * (SilentAim.Silent.PredictionXZ * 10))
				predictedPosition = aimPartPos + (aimPartPos - lastPosition).Unit * predictedDistance

				local yChange = (aimPartPos.Y - lastPosition.Y) / deltaTime * (0.1 * SilentAim.Silent.PredictionY)
				predictedPosition = predictedPosition + Vector3.new(0, yChange, 0)
			end
		end

		lastUpdateTime = currentTime
		lastPosition = aimPartPos
		return predictedPosition
	end
	return nil
end

-- Handle Sticky Aim key press
UserInputService.InputBegan:Connect(function(input, gameProcessedEvent)
	if not gameProcessedEvent and input.UserInputType == Enum.UserInputType.Keyboard and input.KeyCode == SilentAim.Options.StickyKey then
		if SilentAim.Options.Mode == "Sticky" and SilentAim.Options.Enabled then
			if stickyToggled then
				-- Toggle off or select new target
				stickyToggled = false
				stickyTarget = nil
			else
				-- Select new target
				stickyTarget = GetClosestPlayerToCursor()
				if stickyTarget then
					stickyToggled = true
				end
			end
		end
	end
end)

-- Silent Aim Logic
local MetaTable = getrawmetatable(game)
local OldIndex = MetaTable.__index
setreadonly(MetaTable, false)

MetaTable.__index = function(self, key)
	if not checkcaller() and self == LocalPlayer:GetMouse() and SilentAim.Options.Enabled then
		if key == "Hit" or key == "Target" then
			local targetPlayer
			if SilentAim.Options.Mode == "Auto" then
				targetPlayer = GetClosestPlayerToCursor()
			elseif SilentAim.Options.Mode == "Sticky" and stickyToggled then
				if stickyTarget and IsPlayerAlive(stickyTarget) and WallCheck(stickyTarget.Character) then
					targetPlayer = stickyTarget
				else
					stickyToggled = false
					stickyTarget = nil
				end
			end

			if targetPlayer and targetPlayer.Character then
				local targetPart
				if SilentAim.Silent.MultipleParts.Enabled then
					targetPart = GetClosestPartFromPlayerToCursor(SilentAim.Silent.MultipleParts, targetPlayer.Character)
				else
					targetPart = targetPlayer.Character:FindFirstChild(SilentAim.Silent.Part)
				end
				if targetPart then
					local finalPosition
					if SilentAim.Misc.Checks.Resolver.Enabled then
						-- Use resolver for prediction
						finalPosition = getPredictedPosition(targetPlayer)
					else
						-- Use default prediction
						local velocity = targetPart.Velocity or Vector3.zero
						finalPosition = targetPart.Position + (velocity * SilentAim.Silent.Prediction)
					end

					-- Apply offsets for jump/fall if needed
					local humanoid = targetPlayer.Character:FindFirstChildOfClass("Humanoid")
					if humanoid and finalPosition then
						if humanoid:GetState() == Enum.HumanoidStateType.Jumping then
							finalPosition = finalPosition + Vector3.new(0, SilentAim.Silent.Offsets.Jump.Amount, 0)
						elseif humanoid:GetState() == Enum.HumanoidStateType.Freefall then
							finalPosition = finalPosition + Vector3.new(0, SilentAim.Silent.Offsets.Fall.Amount, 0)
						end
					end
					return key == "Hit" and (finalPosition and NewCFrame(finalPosition) or NewCFrame(targetPart.Position)) or targetPart
				end
			end
		end
	end
	return OldIndex(self, key)
end
setreadonly(MetaTable, true)

-- Handle tool fix on character spawn/respawn
local function FixTool(character)
	if character then
		for _, v in next, character:GetChildren() do
			if IsA(v, "Tool") then
				local currentTool = v
				currentTool.Parent = LocalPlayer:FindFirstChildOfClass("Backpack")
				break
			end
		end
	end
end

-- Initial tool fix
FixTool(LocalPlayer.Character)

-- Handle respawn
LocalPlayer.CharacterAdded:Connect(function(character)
	FixTool(character)
end)

getgenv().Loaded = true

-- Create the main window
local Window = Library:CreateWindow({
    Title = "TitanCX",
    Footer = "Cursed by 32vision",
    ShowCustomCursor = false,
})

-- Create tabs
local Tabs = {
    Combat = Window:AddTab("Combat", "sword"),
    Movement = Window:AddTab("Movement", "move"),
    Visuals = Window:AddTab("Visuals", "eye"),
    Misc = Window:AddTab("Misc", "box"),
    Other = Window:AddTab("Other", "list"),
    HUD = Window:AddTab("HUD", "monitor"),
}

-- Add Aimbot Groupbox to Combat tab
local AimbotGroupbox = Tabs["Combat"]:AddLeftGroupbox("Aimbot")

-- Add UI elements to AimbotGroupbox
local AimbotToggle = AimbotGroupbox:AddToggle("AimbotToggle", {
    Text = "Enable Aimbot",
    Default = false, -- Defaulted to false
    Callback = function(Value)
        getgenv().SilentAim.Options.Enabled = Value
    end
})

local AimbotModeDropdown = AimbotGroupbox:AddDropdown("AimbotMode", {
    Text = "Aimbot Mode",
    Values = {"Auto", "Sticky"},
    Default = "Auto", -- Keep a default mode
    Callback = function(Value)
        getgenv().SilentAim.Options.Mode = Value
    end
})

local StickyKeybind = AimbotToggle:AddKeyPicker("StickyKeybind", {
    Text = "Sticky Key",
    Default = "E", -- Keep default key
    Mode = "Toggle", -- Assuming Toggle mode for sticky key
    ChangedCallback = function(NewKey)
        getgenv().SilentAim.Options.StickyKey = Enum.KeyCode[NewKey]
    end
})

local TargetPartDropdown = AimbotGroupbox:AddDropdown("TargetPart", {
    Text = "Target Part",
    Values = {"HumanoidRootPart", "Head", "UpperTorso", "LowerTorso"},
    Default = getgenv().SilentAim.Silent.Part, -- Current default from script
    Callback = function(Value)
        getgenv().SilentAim.Silent.Part = Value
    end
})

local ResolverToggle = AimbotGroupbox:AddToggle("ResolverToggle", {
    Text = "Enable Resolver",
    Default = false, -- Defaulted to false
    Callback = function(Value)
        getgenv().SilentAim.Misc.Checks.Resolver.Enabled = Value
    end
})

local ResolverModeDropdown = AimbotGroupbox:AddDropdown("ResolverMode", {
    Text = "Resolver Mode",
    Values = {"Velocity", "Move direction", "Calculate CFrame"},
    Default = "Calculate CFrame", -- Keep a default mode
    Callback = function(Value)
        getgenv().SilentAim.Misc.Checks.Resolver.Type = Value
    end
})

local PredictionNoResInput = AimbotGroupbox:AddInput("PredictionNoResInput", {
    Text = "Prediction (No Resolver)",
    Default = "0", -- Defaulted to "0"
    Numeric = true,
    Finished = true,
    Callback = function(Value)
        getgenv().SilentAim.Silent.Prediction = tonumber(Value) or 0
    end
})

local PredictionWResYInput = AimbotGroupbox:AddInput("PredictionWResYInput", {
    Text = "Prediction Y (With Resolver)",
    Default = "0", -- Defaulted to "0"
    Numeric = true,
    Finished = true,
    Callback = function(Value)
        getgenv().SilentAim.Silent.PredictionY = tonumber(Value) or 0
    end
})

local PredictionWResXZInput = AimbotGroupbox:AddInput("PredictionWResXZInput", {
    Text = "Prediction XZ (With Resolver)",
    Default = "0", -- Defaulted to "0"
    Numeric = true,
    Finished = true,
    Callback = function(Value)
        getgenv().SilentAim.Silent.PredictionXZ = tonumber(Value) or 0
    end
})

local WallCheckToggle = AimbotGroupbox:AddToggle("WallCheckToggle", {
    Text = "Wall Check",
    Default = false, -- Defaulted to false
    Callback = function(Value)
        getgenv().SilentAim.Misc.Checks.WallCheck = Value
    end
})

local TargetDeathToggle = AimbotGroupbox:AddToggle("TargetDeathToggle", {
    Text = "Ignore Dead Targets",
    Default = false, -- Defaulted to false
    Callback = function(Value)
        getgenv().SilentAim.Misc.Checks.TargetDeath = Value
    end
})

local IgnoreGrabbedToggle = AimbotGroupbox:AddToggle("IgnoreGrabbedToggle", {
    Text = "Ignore Grabbed Players",
    Default = false, -- Defaulted to false
    Callback = function(Value)
        getgenv().SilentAim.Misc.Checks.IgnoreGrabbed = Value
    end
})

local IgnoreKOToggle = AimbotGroupbox:AddToggle("IgnoreKOToggle", {
    Text = "Ignore Knocked Out Players",
    Default = false, -- Defaulted to false
    Callback = function(Value)
        getgenv().SilentAim.Misc.Checks.IgnoreKO = Value
    end
})

local JumpOffsetInput = AimbotGroupbox:AddInput("JumpOffsetInput", {
    Text = "Jump Offset",
    Default = "0", -- Defaulted to "0"
    Numeric = true,
    Finished = true,
    Callback = function(Value)
        getgenv().SilentAim.Silent.Offsets.Jump.Amount = tonumber(Value) or 0
    end
})

local FallOffsetInput = AimbotGroupbox:AddInput("FallOffsetInput", {
    Text = "Fall Offset",
    Default = "0", -- Defaulted to "0"
    Numeric = true,
    Finished = true,
    Callback = function(Value)
        getgenv().SilentAim.Silent.Offsets.Fall.Amount = tonumber(Value) or 0
    end
})

-- Setup ThemeManager and SaveManager
ThemeManager:SetLibrary(Library)
SaveManager:SetLibrary(Library)
SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({ "MenuKeybind" })

ThemeManager:SetFolder("ClickGUI")
SaveManager:SetFolder("ClickGUI/settings")

SaveManager:BuildConfigSection(Tabs["HUD"])
ThemeManager:ApplyToTab(Tabs["HUD"])

-- Show the UI
Library:Toggle(true)
